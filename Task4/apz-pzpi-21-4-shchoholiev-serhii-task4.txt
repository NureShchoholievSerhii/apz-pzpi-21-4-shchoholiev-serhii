1 МЕТА РОБОТИ

Розробити клієнтську частину програмної системи. Ця частина системи повинна підтримувати роботу клієнтів у веб-режимі та забезпечувати адміністрування системи. Створити UML діаграми прецедентів, компонентів та діяльності за темою програмна система для моніторингу продуктів у холодильниках та управління рецептами.
 
2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

2.1 Розробка UML діаграми прецедентів

Для опису поведінки системи використовується UML діаграма прецедентів. Діаграму для користувача з роллю «Користувач» наведено на рисунку 1. Вона описує базовий функціонал доступний усім користувачам.
Користувач з роллю «Користувач» є основним актором у системі. Всі подальші ролі наслідують можливості від користувача і розширюють нього. Він має можливості реєстрації та подальшого входу у систему, створювати групу, що додає користувачу роль «Власник» (див. рис. 2). Крім того користувач може переглядати рецепти та продукти, шукати, оновлювати та створювати рецепти з можливістю вибору категорії рецепту та завантаження фото. «Користувач» також взаємодіє з актором пристрою для розпізнавання продуктів. 
Як було зазначено, якщо користувач створює групу, то він автоматично отримає роль «Власник». Це додає можливості: перегляду та активація пристроїв і управління групою. Крім цього існує актор «Адміністратор», що має можливість управління користувачами та додавання пристроїв, бо кожен пристрій має бути додано у систему під час його первинного налаштування (див. рис. 2). 

2.2 Розробка UML діаграми компонентів

Діаграма компонентів відображає, як система розділена на компоненти і як ці компоненти взаємодіють між собою. На рисунку 3 зображена діаграма компонентів клієнтської частини, а саме сторінок або Angular компонентів і їх взаємодія між собою.
Навігаційна панель є центром додатку (див. рис. 3), з її допомогою користувач може отримати доступ до більшості сторінок, що включають реєстрацію, вхід у систему, створення групи, пристрою або рецепту, перегляд пристроїв, продуктів, рецептів та користувачів. Крім того, користувач може переходити з реєстрації на вхід у систему і назад. При перегляді рецептів користувач може перейти на деталі рецепту. Під час перегляду користувачів адміністратор може переглянути деталі одного з користувачів.

2.3	Розробка UML діаграми діяльності

Діаграма діяльності відображає послідовність кроків та контрольну структуру, які описують, як діяльності виконуються для досягнення певної мети. На рисунку 4 наведено діаграму діяльності для початкового налаштування системи.
Спочатку користувачу треба зареєструватися, після чого початкове налаштування відрізняється для користувача, що буде власником групи та учасником групи. Першому треба створити групи, після чого він може додати учасників до групи або активувати пристрої (див. рис. 4), що були придбані заздалегідь. Учаснику ж треба надати свою поштову скриньку або телефон власнику групи. Далі користувачі мають додати продукти та рецепти. Після цього цифрова частина системи готова для використання.

2.4	Розробка UML діаграми станів

Діаграма станів зображує різні стани об'єкта в рамках життєвого циклу системи. Вона використовується для ілюстрації, як об'єкт відповідає на різні події, змінюючи свої стани. На рисунку 5 зображено діаграму станів ролей користувача у системі, а саме те, за допомогою яких дій користувач змінює ролі.
Після реєстрації усі користувачі отримують роль «Користувач» (див. рис. 5), що має базовий функціонал. Для того, щоб отримати роль розширений функціонал користувач має створити групу і автоматично отримати роль «Власник». Єдині користувачі, що можуть виконувати адміністрування системи, це користувачі з роллю «Адміністратор». Її можна отримати тільки коли інший адміністратор надає користувачу цю роль через панель адміністрування.

3 ІНЖЕНЕРНІ РІШЕННЯ

3.1 Технічні рішення

Програмна система використовує Angular у поєднанні з TypeScript, що забезпечує потужний фундамент для створення сучасного, інтерактивного та високопродуктивного користувацького інтерфейсу. Angular, як фреймворк розроблений Google, пропонує цілісну архітектуру з підтримкою різноманітних інструментів та бібліотек, які сприяють структурованому та модульному підходу до розробки. Використання Angular у проекті дозволяє ефективно управляти станами додатка, забезпечуючи плавну взаємодію з користувачем і високу швидкість відгуку інтерфейсу. Його розширені можливості з обробки даних та рендеринга, а також вбудована підтримка відповідей на події, роблять Angular ідеальним вибором для складних веб-додатків.
Вибір TypeScript як основної мови програмування для роботи з Angular підсилює загальну продуктивність та надійність додатка. TypeScript пропонує переваги статичної типізації, що значно спрощує виявлення помилок на ранніх етапах розробки та забезпечує більшу чистоту та читабельність коду. Крім того, інтеграція TypeScript з Angular розкриває додаткові можливості для оптимізації роботи з шаблонами та компонентами, підвищуючи загальну ефективність та гнучкість розробки.
Крім того, додаток використовує CSS фреймворк – Bootstrap. Як один з найпопулярніших фронтенд фреймворків, Bootstrap пропонує широкий спектр готових до використання компонентів і стилів, що значно спрощує процес дизайну та забезпечує консистентність інтерфейсу. Його адаптивна сітка та система шаблонів дозволяють легко створювати відгуковий дизайн, що важливо для сучасних веб-додатків, які повинні ефективно працювати на різних пристроях і розмірах екранів.

3.2 Розробка користувацького інтерфейсу 

Angular це фреймворк для розробки односторінкових додатків, тому кожна сторінка представлена не як повністю окрема сторінка, а як компонент сторінки. При першому відкритті додатку, користувача зустрічає сторінка реєстрації (див. рис. 6). Вона має форму для введення даних та перевірку формату поштової скриньки та телефону, що відображає користувачу детальну помилку, якщо реєстрація не була успішною (див. дот. А).
Після реєстрації користувача зустрічає сторінка створення групи, що зображена на рисунку 7. Для створення групи користувачу треба ввести ім’я та натиснути кнопку, після чого його буде перенаправлено на сторінку групи і надано роль «Власник» як було зазначено на діаграмі станів. 
Сторінка групи містить ім’я та опис групи, а також список усіх користувачів. Щоб додати нового користувача, власнику групи треба лише ввести його номер телефону або поштову скриньку.
Після створення групи, користувач може активувати пристрої, що відбувається на сторінці пристроїв (див. рис. 9). Для активування пристрою користувачу треба ввести унікальний ідентифікатор пристрою. 
Крім того, користувач може додавати, шукати продукти (див. рис. 10) та оновлювати їх кількість (див. рис. 11).
Після додавання продуктів користувач може перейти до додавання рецептів (див. рис. 12). Під час створення рецепту користувач має додати назву, опис, обрати зображення, інгредієнти, а також категорії. Їх можна створити на тій самій сторінці.
Після створення рецепту користувача перенаправляє на сторінку перегляду деталей рецепту (див. рис. 13). Де користувач може редагувати, видалити або приготувати рецепт. При натисканні на кнопку приготування рецепту, бізнес логіка на серверній частині перевіряє чи достатньо продуктів у групі і якщо достатньо то вони віднімаються з складу, в зворотному випадку користувач отримає помилку, з описом яких продуктів не вистачає. Також для редагування і створення рецепту використовується один і той самий компонент Angular. Він має бізнес логіку, що дивиться на унікальний ідентифікатор рецепту і якщо він присутній, то відбудеться оновлення предмету, якщо ні то створення.
Далі користувач може шукати рецепти (див. рис. 14). Як зазначено на діаграмі компонентів, кожна сторінка має навігаційну панель, за допомогою якої користувач можу переходити на більшість сторінок додатку. Кожна сторінка, що може мати велику кількість сутностей має можливість посторінкового виводу, для якого також було розроблено окремий Angular компонент (див. дот. Б)  аби використовувати його на всіх сторінках і зменшити кількість повторного коду.

3.3 Розробка інтерфейсу адміністрування

Інтерфейс адміністратора відрізняється лише розширеним функціоналом.  На рисунку 15, у навігаційній панелі, можна побачити додаткові розділи, а саме «Users» та «Create Device». Для зміни відображення розділів в навігаційній панелі перевіряються ролі користувача, що отримуються з JWT  і на базі них додаються розділи (див. дот. В).
Для оновлення даних користувача і найважливіше, його ролей, адміністратор має перейти на сторінку деталей користувача, що зображена на рисунку 16. Ця сторінка відображає ім’я, електронну пошту, телефон і ролі користувача, кожні з цих даних можуть бути оновлені. 
Найважливішою сторінкою інтерфейсу адміністрування є створення пристрою (див. рис 17).
Після створення пристрою, адміністратору буде надано унікальний ідентифікатор пристрою (див. рис. 18), що має бути завантажено на пристрій під час його налаштування.

3.4 Інтерналіозація та локалізація

Додаток підтримує інтерналіозацію та локалізацію. Усі дати зберігаються у універсальному координованому часі і конвертуються у локальний час для кожного користувача. 
Для локалізації використовується бібліотека ngx-translate. Вона дозволяє легко переключатися між різними мовами, зберігаючи переклади у вигляді ключ-значення у JSON-файлах. Під час виконання додатку, ngx-translate динамічно замінює вказані ключі на відповідні переклади в залежності від вибраної користувачем мови. Це забезпечує гнучкість у роботі з текстами та спрощує процес локалізації, роблячи додаток доступнішим для міжнародної аудиторії та поліпшуючи його користувацький досвід. Приклад локалізації наведено на рисунку 19. Логіка зміни мови знаходиться у компоненті нижньої частини додатку «Footer» (див. дот. Г). 
 
4 ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено клієнтську частину програмної системи, що підтримує роботу клієнтів у веб-режимі та  забезпечувати адміністрування системи. Створено UML діаграми прецедентів, компонентів та діяльності за темою програмна система для моніторингу продуктів у холодильниках та управління рецептами.