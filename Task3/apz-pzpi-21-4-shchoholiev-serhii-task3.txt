1 МЕТА РОБОТИ

Розробити програмне забезпечення для  IoT або SmartDevice пристрою, реалізованого на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем. Пристрій повинен бути частиною програмної системи і повинен взаємодіяти з нею. Програмне забезпечення повинно реалізовувати розширену функціональність,  що відповідає концепції IoT або SmartDevice, та забезпечувати взаємодію з  іншими частинами системи Створити UML діаграми прецедентів, взаємодії, діяльності та компонентів за темою програмна система для моніторингу продуктів у холодильниках та управління рецептами.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

2.1 Розробка UML діаграми прецедентів

Для опису поведінки системи використовується UML діаграма прецедентів. Повну діаграму системи було наведено в попередній лабораторній роботі. На рисунку 1 зображено діаграму прецедентів тільки для IoT пристрою системи, а саме для пристрою розпізнавання продуктів.  Пристрій може розпізнавати продукти роблячи фото за допомогою камери коли розпізнано рух та надсилаючи фото до серверної частини.

2.2 Розробка UML діаграми взаємодії

Діаграма взаємодії відображає перебіг процесів у формі вузлів активності та контрольних вузлів, які представляють собою різні типи взаємодії, такі як виклик операцій, послідовність подій або паралельні процеси. Кожен вузол активності має діаграму послідовності, що описує кроки виконання активності та взаємодію між різними частинами системи. 
IoT частина програмної системи для моніторингу продуктів у холодильниках містить один IoT пристрій, що відповідає за розпізнавання продуктів. Пристрій використовує інфрачервоний датчик руху для виявлення руху та модуль камери для фотографування (див. рис. 2). Отримане фото відправляється на серверну частину де відбувається його обробка.

2.3 Розробка UML діаграми діяльності

Діаграма діяльності представляє потоки робочого процесу або операцій в системі. Вона відображає послідовність кроків та контрольну структуру, які описують, як діяльності виконуються для досягнення певної мети. На рисунку 3 наведено діаграму діяльності для роботи пристрою розпізнавання продуктів, а саме для розпізнавання продукту та оновлення кількості чи додавання нового продукту до системи. 
Процес починається коли пристрій розпізнає рух. Після цього, використовуючи камеру, пристрій робить фото і надсилає його на серверну частину, яка передає фото до «Azure Vision» для розпізнавання продукту на зображенні з використанням штучного інтелекту. Наступним кроком відбувається пошук продукту за назвою у системі. Якщо продукт знайдено, то кількість продукту оновлюється, інакше новий продукт додається у систему.

2.4 Розробка UML діаграми компонентів

Діаграма компонентів використовується для моделювання фізичної структури системи. Мозком пристрою є одноплатний комп’ютер «Raspberry Pi Zero W» (див. рис. 4). Він має достатньо обчислювальної потужності для виконання описаних раніше задач, 40-контактний роз'єм GPIO для контролю датчиків та інших зовнішніх пристроїв, вбудований WiFi та роз'єм для підключення камери. 
Пристрій розпізнавання продуктів використовує інфрачервоний датчик руху для розпізнавання руху. Він реагує на інфрачервону радіацію, тобто тепло. Коли людина кладе продукт перед точкою доступу, цей датчик виявляє велику зміну у температурі та надсилає сигнал до комп’ютеру. Також пристрій має модуль камери для фото. 

3 ІНЖЕНЕРНІ РІШЕННЯ

3.1 Загальні рішення

Програмна система для моніторингу продуктів у холодильниках та управління рецептами вимагає розробки додатку для IoT пристрою розпізнавання продуктів і для спрощення розробки та підтримки програмного забезпечення, було прийнято низку загальних рішень.
«Raspberry Pi»  підтримує додатки на C++ та Python. Додаток для пристрою для розпізнавання продуктів написано на мові програмування Python, бо вона має велику кількість бібліотек, що спрощує та прискорює процес розробки. 
Кожен пристрій потребує встановлення додатків і завантаження конфігурації, що містить унікальний ідентифікатор пристрою. Для впровадження такого функціоналу Python надає можливість створювати пакети, що надалі можуть бути легко встановленні на пристрої, а для конфігурації використовується JSON файл, що завантажується разом з додатками.
Для комунікації від IoT пристрою до серверної частини використовуються звичайні HTTP запити, що включають унікальний ідентифікатор девайсу, замість «Azure IoT Hub», бо це коштує додаткових грошей. Крім того, «Azure IoT Hub» не підтримує передачу файлів і пристрій технічно не може відправити фото використовуючи цей сервіс.

3.2 Розробка пристрою розпізнавання продуктів

Почнемо з фізичної побудови пристрою розпізнавання продуктів. Як було зазначено раніше, серцем пристрою є «Raspberry Pi Zero W», до нього о «Raspberry Pi» було припаяно 40-контактний роз'єм GPIO, який було використано для підключення інфрачервоного датчику руху (див. дод. А). Для живлення системи наразі використовується звичайний «Power Bank» для спрощення створення прототипу. Камера підключена до комп’ютеру за допомогою «CSI» роз’єму. Камера і датчик руху встановленні один біля одного і було збудовано невеликий купол, схожий на настільну лампу аби не тільки приховати елементи, а і зменшити радіус роботи інфрачервоного датчику, щоб він працював лише коли відбувається рух на столі, а не біля нього.
Бізнес логіка пристрою розпізнавання предметів детально описана у звіті за допомогою діаграм взаємодії та активності. Коли датчик розпізнає рух, він відправляє GPIO сигнал з одиницею. Після чого додаток робить фото (див. дод. Б) та відправляє його на серверну частину за допомогою HTTP запитів (див. дод. В).

4 ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено програмне забезпечення для  IoT пристрою, «Raspberry Pi», що реалізовує розширену функціональність та забезпечує взаємодію з  іншими частинами системи. Створено UML діаграму прецедентів, взаємодії, діяльності та компонентів за темою програмна система для моніторингу продуктів у холодильниках та управління рецептами. 
