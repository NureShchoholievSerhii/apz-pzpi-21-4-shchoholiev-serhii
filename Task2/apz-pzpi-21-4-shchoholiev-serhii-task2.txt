Інженерні рішення

Як було зазначено на діаграмі розгортання, система зберігає дані у «MongoDB». Серверну частину розроблено з використанням фреймворку .NET 8 та мови програмування C#. Вона взаємодіє з сервісом машинного зору «Azure Vision» та сховищем файлів стандарту «iDrive E2».
Почнемо з бази даних, нереляційна база даних «MongoDB», що зберігає данні як JSON документи була використана в першу чергу через можливість використання «Shards», технології, що розбиває базу даних на багато малих баз даних у різних регіонах, щоб данні були максимально близько до користувачів і час взаємодії з БД був мінімальний. Додаток не має інформації що поширюється між усіма користувачами, тому  «Shards» у поєднанні з Docker контейнерами, що також можуть бути розгорнуті як можна ближче до користувачів, дозволить значно пришвидшити роботу додатку. 
Серверна частина відповідає за всю бізнес логіку наявну у системі і має REST API інтерфейс, за допомогою якого інші частини системи можуть взаємодіяти з додатком. Специфікацію REST API наведено у таблиці 1. Додаток використовує чисту або ж цибулинову архітектуру (див. рис 6). Суть архітектури полягає в організації коду таким чином, щоб забезпечити низьку залежність компонентів один від одного, легкість у тестуванні та модифікації. Ця архітектура підтримує принципи SOLID та централізує бізнес-логіку, розділяючи її від інтерфейсу користувача, бази даних та зовнішніх агентів. Даний додаток має 5 шарів. Domain для зберігання сутностей переліків, всі інші шари використовують цей шар. Application має інтерфейси і DTO (Об'єкти передачі даних). Далі Persistence відповідає за доступ до бази даних і має реалізацію репозиторіїв. Шар Infrastructure відповідає за реалізацію сервісів. І останній, Api шар має контролери, що реалізують REST API інтерфейс. 
Для аутентифікації використовується «JSON Web Token». Коли користувач входить у систему він отримує «Access Token» та «Refresh Token». Перший містить зашифровані за допомогою спеціального ключа дані про користувача і має короткий час життя, 15 хвилин у даній системі. Коли час спливає то відбувається оновлення, для якого потрібен «Refresh Token», що має час життя 30 днів. Коли «Refresh Token» стає не дійсним, то користувач має ввести логін і пароль.
Серверна частина має велику кількість бізнес логіку. Найважливішою є бізнес логіка групування. Ядром цієї логіки є сутність групи. Кожен користувач, предмет, пристрій, шафа мають належати до групи. Користувач може створити групу, після чого він отримає роль «Власник» з розширеними можливостями (див. дод. А), які були описані у діаграмі прецедентів.
Не менш важливим є створення і активація пристроїв. Кожен пристрій має бути створений адміністратором у системі під час завантаження програмного забезпечення на пристрій. Коли користувач отримує фізичний пристрій він має активувати його у додатку. На серверній частині для цього є кінцева точка для оновлення статусу пристрою. При активуванні пристрій буде додано до групи.
Серверна частина містить і бізнес логіку що взаємодіє з IoT пристроями, а саме пристроєм для розпізнавання продуктів. Процес починається коли пристрій розпізнає рух за допомогою інфрачервоного датчика руху. Після цього, використовуючи камеру, пристрій робить фото і надсилає його на серверну частину. Далі фото надсилається до «Azure Vision» для розпізнавання продукту на зображенні. Наступним кроком відбувається пошук продукту за назвою. Якщо продукт знайдено, то його кількість оновлюється, у зворотньому сценарії продукт додається до бази даних (див. дод. Б).
Вибір «Azure Vision» замість «Google Cloud Vision» або «Amazon Rekognition» зумовлений вищою точністю і якістю моделей «Azure» у останні роки через партнерство з «OpenAI». Також, усі додатки розгорнуто у хмарі від «Azure» і використання ШІ сервісу від того ж самого постачальнику спрощує управління сервісами та зменшує час первинного налаштування взаємодії з продуктом.
Крім цього серверна частина має логіку пошуку рецептів та продуктів, що повертає їх з бази даних, відфільтровані за ідентифікатором групи і пошуковим запитом, порівнюючи його з назвою продукту (див. дод. В), Функціонал пристрою розпізнавання продуктів, що описано на діаграмі активності спирається на логіку пошуку.
Для забезпечення високої якості коду, серверна частина використовую інтеграційні тести. Інтеграційні тести перевіряють взаємодію між різними модулями та компонентами системи, включаючи взаємодію з базою даних та зовнішніми сервісами. Вони допомагають виявити помилки, що можуть виникнути в процесі взаємодії різних частин системи, які не завжди можна виявити за допомогою одиничних тестів. Тести також забезпечують перевірку відповідності системи її технічним вимогам та специфікаціям. Проєкт має 83 інтеграційні тести (див. рис. 7).
