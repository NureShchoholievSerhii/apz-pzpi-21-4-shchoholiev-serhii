2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

2.1 Розробка UML діаграми прецедентів

Для опису поведінки системи використовується UML діаграма прецедентів. Діаграму для користувача з роллю «Користувач» наведено на рисунку 1. Вона описує базовий функціонал доступний усім користувачам.
Користувач з роллю «Користувач» є основним актором у системі. Всі подальші ролі наслідують можливості від користувача і розширюють нього. Він має можливості реєстрації та подальшого входу у систему, створювати групу, що додає користувачу роль «Власник» (див. рис. 2). Крім того користувач може переглядати рецепти та продукти, шукати, оновлювати та створювати рецепти з можливістю вибору категорії рецепту та завантаження фото. «Користувач» також взаємодіє з актором пристрою для розпізнавання продуктів. 
Як було зазначено, якщо користувач створює групу, то він автоматично отримає роль «Власник». Це додає можливості: перегляду та активація пристроїв і управління групою. Крім цього існує актор «Адміністратор», що має можливість управління користувачами та додавання пристроїв, бо кожен пристрій має бути додано у систему під час його первинного налаштування (див. рис. 2). 

2.2 Розробка UML діаграми розгортання

Діаграма розгортання показує як елементи або компоненти системи розміщуються на апаратному забезпеченні та як вони взаємодіють між собою. Використовуючи діаграму розгортання, інженери та розробники можуть розуміти, як програмне забезпечення взаємодіє з обладнанням, а також визначити вимоги до виконавчого середовища. Повну діаграму розгортання системи наведено на рисунку 3.
Система зберігає всі данні у не реляційній базі даних «MongoDB». ЇЇ було обрано через можливість зберігати дані в форматі JSON, що спрощує інтеграцію з різними мовами програмування та платформами. 
Доступ до бази даних відбувається через .NET 8 додаток, серверну частину, що відповідає за основну логіку системи. Додаток взаємодії з сервісом «Azure Vision» для розпізнавання предметів на зображеннях. Для зберігання зображень рецептів використовується сховище файлів стандарту «S3» «iDrive E2». 
Веб-додаток використовує Javascript фреймворк Angular і взаємодіє з серверною частиною за допомогою REST API. Його можна використовувати з будь-якого пристрою, що має встановлений браузер та доступ до Інтернету. Додаток містить клієнтську частину та панель адміністратора.
Серверну частину, веб-додаток та базу даних розгорнуто на хмарі від «Azure», щоб зменшити затримку між додатками та іншими сервісами від «Azure» і полегшити менеджмент. 
Мобільний додаток розроблено з використанням Swift і SwiftUI, фреймворк для декларативного створення інтерфейсу користувача в Swift. Його обрано замість Storyboard, бо він дозволяє легко вносити зміни в дизайн та підтримувати код інтерфейсу. Додаток можливо завантажити на будь-який пристрій від Apple, що використовує iOS, iPadOS або macOS. Tак само як і веб-додаток, він взаємодіє з серверною частиною за допомогою REST API. 

2.3	Розробка діаграми ER-моделі

Діаграма ER-моделі використовується для візуалізації та концептуалізації даних для систем, що базуються на базах даних. Вона показує відносини між різними сутностями в системі. ER-діаграма програмної системи складається з дев’яти сутностей. Кожна сутність наслідує базовий клас, що має атрибути для збереження інформації про те коли і ким сутність було створено або оновлено (див. рис. 4). Це дозволяє використати принципи SOLID у коді, а саме «Liskov Substitution», що надає можливість створити базовий клас для доступу к бази даних і зменшити кількість коду. За прикладом великих компаній, данні з БД не видаляються, а використовується логічний прапор у атрибутах сутностей аби помітити сутності як видалені (див. рис. 4). Це дозволяє зберегти історію даних, що надалі може бути використана для покращення системи. Данні стають в нагоді при тренуванні штучного інтелекту.
ER-модель містить такі сутності:
-	Користувачі. Містить інформацію про користувачів додатка включаючи масив ролей, через використання Mongo DB в базі даних не використовується окрема таблиця для відношення між користувачем і роллю;
-	Ролі. Відповідають за доступний користувачу функціонал;
-	Токен оновлення. Використовується для JWT авторизації користувача;
-	Групи. Виконують логіку групування користувачів, рецептів, продуктів та пристроїв, аби користувачі могли користуватися однією системою;
-	Рецепти. Містять інформацію про рецепти, що включає категорії, інгредієнти та зображення;
-	Категорії. Категорії рецептів;
-	Продукти. Зберігає інформацію про продукти що належать групі користувачів, їх назву і кількість;
-	Пристрої. Характеризує IoT пристрої, а саме пристрій розпізнавання продуктів.

2.4	Розробка UML діаграми діяльності

Діаграма діяльності представляє потоки робочого процесу або операцій в системі. Вона відображає послідовність кроків та контрольну структуру, які описують, як діяльності виконуються для досягнення певної мети. На рисунку 5 наведено діаграму діяльності для роботи пристрою розпізнавання продуктів, а саме для розпізнавання продукту та його автоматичне оновлення або додавання у базу даних. 
Процес починається коли пристрій розпізнає рух за допомогою інфрачервоного датчика руху. Після цього, використовуючи камеру, пристрій робить фото і надсилає його на серверну частину. Далі фото надсилається до «Azure Vision» для розпізнавання продукту на зображенні. Наступним кроком відбувається пошук продукту за назвою. Якщо продукт знайдено, то його кількість оновлюється, у зворотньому сценарії продукт додається до бази даних (див. рис 5).

3 ІНЖЕНЕРНІ РІШЕННЯ

3.1 Розробка серверної частини

Як було зазначено на діаграмі розгортання, система зберігає дані у «MongoDB». Серверну частину розроблено з використанням фреймворку .NET 8 та мови програмування C#. Вона взаємодіє з сервісом машинного зору «Azure Vision» та сховищем файлів стандарту «iDrive E2».
Почнемо з бази даних, нереляційна база даних «MongoDB», що зберігає данні як JSON документи була використана в першу чергу через можливість використання «Shards», технології, що розбиває базу даних на багато малих баз даних у різних регіонах, щоб данні були максимально близько до користувачів і час взаємодії з БД був мінімальний. Додаток не має інформації що поширюється між усіма користувачами, тому  «Shards» у поєднанні з Docker контейнерами, що також можуть бути розгорнуті як можна ближче до користувачів, дозволить значно пришвидшити роботу додатку. 
Серверна частина відповідає за всю бізнес логіку наявну у системі і має REST API інтерфейс, за допомогою якого інші частини системи можуть взаємодіяти з додатком. Специфікацію REST API наведено у таблиці 1. Додаток використовує чисту або ж цибулинову архітектуру (див. рис 6). Суть архітектури полягає в організації коду таким чином, щоб забезпечити низьку залежність компонентів один від одного, легкість у тестуванні та модифікації. Ця архітектура підтримує принципи SOLID та централізує бізнес-логіку, розділяючи її від інтерфейсу користувача, бази даних та зовнішніх агентів. Даний додаток має 5 шарів. Domain для зберігання сутностей переліків, всі інші шари використовують цей шар. Application має інтерфейси і DTO (Об'єкти передачі даних). Далі Persistence відповідає за доступ до бази даних і має реалізацію репозиторіїв. Шар Infrastructure відповідає за реалізацію сервісів. І останній, Api шар має контролери, що реалізують REST API інтерфейс. 
Для аутентифікації використовується «JSON Web Token». Коли користувач входить у систему він отримує «Access Token» та «Refresh Token». Перший містить зашифровані за допомогою спеціального ключа дані про користувача і має короткий час життя, 15 хвилин у даній системі. Коли час спливає то відбувається оновлення, для якого потрібен «Refresh Token», що має час життя 30 днів. Коли «Refresh Token» стає не дійсним, то користувач має ввести логін і пароль.
Серверна частина має велику кількість бізнес логіку. Найважливішою є бізнес логіка групування. Ядром цієї логіки є сутність групи. Кожен користувач, предмет, пристрій, шафа мають належати до групи. Користувач може створити групу, після чого він отримає роль «Власник» з розширеними можливостями (див. дод. А), які були описані у діаграмі прецедентів.
Не менш важливим є створення і активація пристроїв. Кожен пристрій має бути створений адміністратором у системі під час завантаження програмного забезпечення на пристрій. Коли користувач отримує фізичний пристрій він має активувати його у додатку. На серверній частині для цього є кінцева точка для оновлення статусу пристрою. При активуванні пристрій буде додано до групи.
Серверна частина містить і бізнес логіку що взаємодіє з IoT пристроями, а саме пристроєм для розпізнавання продуктів. Процес починається коли пристрій розпізнає рух за допомогою інфрачервоного датчика руху. Після цього, використовуючи камеру, пристрій робить фото і надсилає його на серверну частину. Далі фото надсилається до «Azure Vision» для розпізнавання продукту на зображенні. Наступним кроком відбувається пошук продукту за назвою. Якщо продукт знайдено, то його кількість оновлюється, у зворотньому сценарії продукт додається до бази даних (див. дод. Б).
Вибір «Azure Vision» замість «Google Cloud Vision» або «Amazon Rekognition» зумовлений вищою точністю і якістю моделей «Azure» у останні роки через партнерство з «OpenAI». Також, усі додатки розгорнуто у хмарі від «Azure» і використання ШІ сервісу від того ж самого постачальнику спрощує управління сервісами та зменшує час первинного налаштування взаємодії з продуктом.
Крім цього серверна частина має логіку пошуку рецептів та продуктів, що повертає їх з бази даних, відфільтровані за ідентифікатором групи і пошуковим запитом, порівнюючи його з назвою продукту (див. дод. В), Функціонал пристрою розпізнавання продуктів, що описано на діаграмі активності спирається на логіку пошуку.
Для забезпечення високої якості коду, серверна частина використовую інтеграційні тести. Інтеграційні тести перевіряють взаємодію між різними модулями та компонентами системи, включаючи взаємодію з базою даних та зовнішніми сервісами. Вони допомагають виявити помилки, що можуть виникнути в процесі взаємодії різних частин системи, які не завжди можна виявити за допомогою одиничних тестів. Тести також забезпечують перевірку відповідності системи її технічним вимогам та специфікаціям. Проєкт має 83 інтеграційні тести (див. рис. 7).
